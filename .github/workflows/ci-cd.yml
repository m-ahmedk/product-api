# -------------------------------
# Name of the workflow (shows up in GitHub Actions tab)
# -------------------------------
name: CI/CD Pipeline

# -------------------------------
# Triggers: when should this pipeline run?
# -------------------------------
on:
  push:
    branches:
      - main         # production branch → stable releases
      - staging      # pre-prod/QA branch → beta prereleases
      - 'feature/*'  # feature branches → alpha prereleases (build + test only)
      - 'fix/*'      # fix branches → alpha prereleases (build + test only)
      - 'chore/*'    # chores (infra/config) → alpha prereleases (build + test only)
      - 'refactor/*' # refactors → alpha prereleases (build + test only)
      - 'docs/*'     # docs → alpha prereleases (build + test only)
  pull_request:
    branches:
      - staging      # validate PRs into staging
      - main         # validate PRs into main

# -------------------------------
# Jobs: each job defines tasks to run
# We only have one job called "build"
# -------------------------------
jobs:
  build:
    runs-on: ubuntu-latest   # GitHub provides a fresh Ubuntu VM for us

    steps:
      # -------------------------------
      # Step 1: Checkout the repo code
      # -------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # -------------------------------
      # Step 2: Install GitVersion
      # GitVersion analyzes git history + branch to auto-generate SemVer
      # -------------------------------
      - name: Install GitVersion
        uses: GitTools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: '5.x'

      # -------------------------------
      # Step 3: Run GitVersion
      # Exposes outputs like:
      #   steps.gitversion.outputs.SemVer → 1.2.3-beta.1
      #   steps.gitversion.outputs.MajorMinorPatch → 1.2.3
      #   steps.gitversion.outputs.PreReleaseLabel → beta
      # -------------------------------
      - name: Run GitVersion
        id: gitversion
        uses: GitTools/actions/gitversion/execute@v0.10.2

      # -------------------------------
      # Step 4: Install .NET SDK (so dotnet commands work)
      # -------------------------------
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'   # use the latest .NET 9 SDK

      # -------------------------------
      # Step 5: Restore dependencies
      # Downloads NuGet packages for all csproj files
      # -------------------------------
      - name: Restore dependencies
        run: dotnet restore

      # -------------------------------
      # Step 6: Build the project in Release mode
      # Inject GitVersion output into /p:Version so assembly & NuGet get correct SemVer
      # -------------------------------
      - name: Build
        run: dotnet build --no-restore --configuration Release /p:Version=${{ steps.gitversion.outputs.SemVer }}

      # -------------------------------
      # Step 7: Run unit/integration tests
      # Runs for all branches (feature/fix/chore/etc + staging + main)
      # -------------------------------
      - name: Run Tests
        run: dotnet test --no-build --configuration Release --verbosity normal

      # -------------------------------
      # Step 8: Login to DockerHub
      # Only runs if branch is main OR staging (feature/fix/chore/etc skip Docker push)
      # -------------------------------
      - name: Login to DockerHub
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # -------------------------------
      # Step 9: Build & Push STAGING image
      # If on staging branch:
      #   - Push product-api:<SemVer> (e.g., 1.2.4-beta.1)
      #   - Push product-api:staging (floating tag for QA)
      # -------------------------------
      - name: Build & Push Staging Image
        if: github.ref == 'refs/heads/staging'
        run: |
          VERSION=${{ steps.gitversion.outputs.SemVer }}
          echo "Building staging version $VERSION"

          docker build \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/product-api:$VERSION \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/product-api:staging \
            -f ProductDemo/Dockerfile .

          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-api:$VERSION
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-api:staging

      # -------------------------------
      # Step 10: Build & Push PRODUCTION image
      # If on main branch:
      #   - Push product-api:<SemVer> (e.g., 1.2.4)
      #   - Push product-api:latest (floating tag for consumers)
      # -------------------------------
      - name: Build & Push Prod Image
        if: github.ref == 'refs/heads/main'
        run: |
          VERSION=${{ steps.gitversion.outputs.SemVer }}
          echo "Building production version $VERSION"

          docker build \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/product-api:$VERSION \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/product-api:latest \
            -f ProductDemo/Dockerfile .

          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-api:$VERSION
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-api:latest