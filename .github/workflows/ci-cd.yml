name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
      - 'feature/*'
      - 'fix/*'
      - 'chore/*'
      - 'refactor/*'
      - 'docs/*'
  pull_request:
    branches:
      - staging
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo with full history (required by GitVersion)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Install GitVersion (latest stable 6.3.x)
      - name: Install GitVersion
        uses: GitTools/actions/gitversion/setup@v4.1.0
        with:
          versionSpec: '6.3.x'

      # 3. Run GitVersion with config file
      - name: Determine Version
        id: gitversion
        uses: GitTools/actions/gitversion/execute@v4.1.0
        with:
          configFilePath: GitVersion.yml

      # 4. Show calculated version in logs
      - name: Display GitVersion outputs
        run: |
          echo "fullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "semVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "nuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "assemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"

      # 5. Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # 6. Restore
      - name: Restore dependencies
        run: dotnet restore

      # 7. Build with GitVersionâ€™s semVer
      - name: Build
        run: dotnet build --no-restore --configuration Release /p:Version=${{ steps.gitversion.outputs.semVer }}

      # 8. Test
      - name: Run Tests
        run: dotnet test --no-build --configuration Release --verbosity normal

      # 9. Login to DockerHub (staging & main only)
      - name: Login to DockerHub
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 10. Push staging images
      - name: Build & Push Staging Image
        if: github.ref == 'refs/heads/staging'
        run: |
          VERSION=${{ steps.gitversion.outputs.semVer }}
          echo "Building staging version $VERSION"

          docker build \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/product-api:$VERSION \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/product-api:staging \
            -f ProductDemo/Dockerfile .

          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-api:$VERSION
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-api:staging

      # 11. Push production images
      - name: Build & Push Prod Image
        if: github.ref == 'refs/heads/main'
        run: |
          VERSION=${{ steps.gitversion.outputs.semVer }}
          echo "Building production version $VERSION"

          docker build \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/product-api:$VERSION \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/product-api:latest \
            -f ProductDemo/Dockerfile .

          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-api:$VERSION
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-api:latest
