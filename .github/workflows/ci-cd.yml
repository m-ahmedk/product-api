# ---------------------------------------------------
# CI/CD Pipeline for Product API
# Uses GitVersion (6.3.x) for semantic versioning
# ---------------------------------------------------
name: CI/CD Pipeline

# Push to main -> production build & push
# Push to staging -> staging build & push
# Push to feature/*, fix/*, etc. -> only build & test (no push)
# PR to staging or main -> runs pipeline for validation
on:
  push:
    branches:
      - main
      - staging
      - 'feature/*'
      - 'fix/*'
      - 'chore/*'
      - 'refactor/*'
      - 'docs/*'
  pull_request:
    branches:
      - staging
      - main

jobs:
  build:
    # Runs on GitHub's Ubuntu VM (clean environment each time)
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repo with full history
      - name: Checkout repository
        # Gets repo code
        uses: actions/checkout@v4
        with:
          # full history (important for GitVersion)
          fetch-depth: 0

      # Step 2: Ensure tags are present
      - name: Fetch tags
        run: git fetch --tags --prune --progress

      # Step 3: Install GitVersion
      - name: Install GitVersion
        uses: GitTools/actions/gitversion/setup@v4.1.0
        with:
          versionSpec: '6.3.x'

      # Step 4: Run GitVersion
      - name: Determine Version
        id: gitversion
        uses: GitTools/actions/gitversion/execute@v4.1.0
        with:
          configFilePath: GitVersion.yml

      # Step 5: Debug version outputs
      - name: Display GitVersion outputs
        run: |
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"

      # Step 6: Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # Step 7: Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Step 8: Build with version injected
      - name: Build
        run: dotnet build --no-restore --configuration Release /p:Version=${{ steps.gitversion.outputs.semVer }}

      # Step 9: Run tests
      - name: Run Tests
        run: dotnet test --no-build --configuration Release --verbosity normal

      # Step 10: Login to DockerHub (staging/main only)
      - name: Login to DockerHub
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 11: Build & Push staging image
      - name: Build & Push Staging Image
        if: github.ref == 'refs/heads/staging'
        run: |
          VERSION=${{ steps.gitversion.outputs.semVer }}
          echo "Building staging version $VERSION"
          docker build \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/product-api:$VERSION \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/product-api:staging \
            -f ProductDemo/Dockerfile .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-api:$VERSION
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-api:staging

      # Step 12: Build & Push production image
      - name: Build & Push Prod Image
        if: github.ref == 'refs/heads/main'
        run: |
          VERSION=${{ steps.gitversion.outputs.semVer }}
          echo "Building production version $VERSION"
          docker build \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/product-api:$VERSION \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/product-api:latest \
            -f ProductDemo/Dockerfile .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-api:$VERSION
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-api:latest
      
      # Step 13: Tag version on push
      - name: Create Git tag
        if: github.ref == 'refs/heads/main'
        run: |
          VERSION=${{ steps.gitversion.outputs.semVer }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag v$VERSION
          git push origin v$VERSION
