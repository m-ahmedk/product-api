# -------------------------------
# Name of the workflow (shows up in GitHub Actions tab)
# -------------------------------
name: CI/CD Pipeline

# -------------------------------
# Triggers: when should this pipeline run?
# -------------------------------
on:
  push:
    branches:
      - main         # production branch → stable releases
      - staging      # pre-prod/QA branch → beta prereleases
      - 'feature/*'  # feature branches → alpha prereleases (build + test only)
      - 'fix/*'      # fix branches → alpha prereleases (build + test only)
      - 'chore/*'    # chores (infra/config) → alpha prereleases (build + test only)
      - 'refactor/*' # refactors → alpha prereleases (build + test only)
      - 'docs/*'     # docs → alpha prereleases (build + test only)
  pull_request:
    branches:
      - staging      # validate PRs into staging
      - main         # validate PRs into main

jobs:
  build:
    runs-on: ubuntu-latest   # GitHub provides a fresh Ubuntu VM for us

    steps:
      # -------------------------------
      # Step 1: Checkout the repo code
      # Use fetch-depth: 0 → required for GitVersion
      # -------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -------------------------------
      # Step 2: Install GitVersion
      # Wrapper version: v4.1.0 (latest)
      # Tool version: 6.3.x (latest stable)
      # -------------------------------
      - name: Install GitVersion
        uses: GitTools/actions/gitversion/setup@v4.1.0
        with:
          versionSpec: '6.3.x'

      # -------------------------------
      # Step 3: Run GitVersion with config
      # Uses GitVersion.yml in repo root
      # -------------------------------
      - name: Determine Version
        id: gitversion
        uses: GitTools/actions/gitversion/execute@v4.1.0
        with:
          useConfigFile: true
          configFilePath: GitVersion.yml

      # -------------------------------
      # Step 4: Show version in logs
      # Makes it easy to confirm CI versioning
      # -------------------------------
      - name: Display GitVersion outputs
        run: |
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"

      # -------------------------------
      # Step 5: Setup .NET SDK
      # -------------------------------
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # -------------------------------
      # Step 6: Restore dependencies
      # -------------------------------
      - name: Restore dependencies
        run: dotnet restore

      # -------------------------------
      # Step 7: Build
      # Pass GitVersion’s FullSemVer into /p:Version
      # -------------------------------
      - name: Build
        run: dotnet build --no-restore --configuration Release /p:Version=${{ steps.gitversion.outputs.fullSemVer }}

      # -------------------------------
      # Step 8: Run tests
      # Runs for all branches
      # -------------------------------
      - name: Run Tests
        run: dotnet test --no-build --configuration Release --verbosity normal

      # -------------------------------
      # Step 9: Login to DockerHub
      # Only runs for staging + main
      # -------------------------------
      - name: Login to DockerHub
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # -------------------------------
      # Step 10: Build & Push STAGING image
      # Tags:
      #   product-api:<FullSemVer> (e.g., 1.2.3-beta.1)
      #   product-api:staging (floating QA tag)
      # -------------------------------
      - name: Build & Push Staging Image
        if: github.ref == 'refs/heads/staging'
        run: |
          VERSION=${{ steps.gitversion.outputs.fullSemVer }}
          echo "Building staging version $VERSION"

          docker build \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/product-api:$VERSION \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/product-api:staging \
            -f ProductDemo/Dockerfile .

          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-api:$VERSION
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-api:staging

      # -------------------------------
      # Step 11: Build & Push PRODUCTION image
      # Tags:
      #   product-api:<FullSemVer> (e.g., 1.2.3)
      #   product-api:latest (floating stable tag)
      # -------------------------------
      - name: Build & Push Prod Image
        if: github.ref == 'refs/heads/main'
        run: |
          VERSION=${{ steps.gitversion.outputs.fullSemVer }}
          echo "Building production version $VERSION"

          docker build \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/product-api:$VERSION \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/product-api:latest \
            -f ProductDemo/Dockerfile .

          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-api:$VERSION
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-api:latest