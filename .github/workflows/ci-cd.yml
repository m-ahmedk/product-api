name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
      - 'feature/*'
      - 'fix/*'
      - 'chore/*'
      - 'refactor/*'
      - 'docs/*'
  pull_request:
    branches:
      - staging
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # -------------------------------
      # Step 1: Checkout with full history
      # -------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -------------------------------
      # Step 2: Ensure tags are available
      # Required so GitVersion can find v0.1.0 baseline
      # -------------------------------
      - name: Fetch tags
        run: git fetch --tags --prune --progress

      # -------------------------------
      # Step 3: Install GitVersion (latest stable v6.3.x)
      # -------------------------------
      - name: Install GitVersion
        uses: GitTools/actions/gitversion/setup@v4.1.0
        with:
          versionSpec: '6.3.x'

      # -------------------------------
      # Step 4: Run GitVersion
      # -------------------------------
      - name: Determine Version
        id: gitversion
        uses: GitTools/actions/gitversion/execute@v4.1.0
        with:
          configFilePath: GitVersion.yml

      # -------------------------------
      # Step 5: Display GitVersion outputs
      # -------------------------------
      - name: Display GitVersion outputs
        run: |
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"

      # -------------------------------
      # Step 6: Setup .NET SDK
      # -------------------------------
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # -------------------------------
      # Step 7: Cache NuGet packages
      # -------------------------------
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # -------------------------------
      # Step 8: Restore dependencies
      # -------------------------------
      - name: Restore dependencies
        run: dotnet restore

      # -------------------------------
      # Step 9: Build project
      # Inject GitVersion fullSemVer into assemblies
      # -------------------------------
      - name: Build
        run: dotnet build --no-restore --configuration Release /p:Version=${{ steps.gitversion.outputs.fullSemVer }}

      # -------------------------------
      # Step 10: Run tests
      # -------------------------------
      - name: Run Tests
        run: dotnet test --no-build --configuration Release --verbosity normal

      # -------------------------------
      # Step 11: Login to DockerHub (only staging/main)
      # -------------------------------
      - name: Login to DockerHub
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # -------------------------------
      # Step 12: Setup Docker Buildx (for caching)
      # -------------------------------
      - name: Setup Docker Buildx
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
        uses: docker/setup-buildx-action@v3

      # -------------------------------
      # Step 13: Build & Push STAGING image
      # -------------------------------
      - name: Build & Push Staging Image
        if: github.ref == 'refs/heads/staging'
        uses: docker/build-push-action@v5
        with:
          push: true
          context: .
          file: ProductDemo/Dockerfile
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/product-api:${{ steps.gitversion.outputs.semVer }}
            ${{ secrets.DOCKERHUB_USERNAME }}/product-api:staging
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/product-api:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/product-api:buildcache,mode=max

      # -------------------------------
      # Step 14: Build & Push PROD image
      # -------------------------------
      - name: Build & Push Prod Image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          push: true
          context: .
          file: ProductDemo/Dockerfile
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/product-api:${{ steps.gitversion.outputs.semVer }}
            ${{ secrets.DOCKERHUB_USERNAME }}/product-api:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/product-api:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/product-api:buildcache,mode=max